GUANO - Grand Unified Acoustic Notation Ontology
This document outlines an extensible metadata format specifically for use with bat acoustic recordings, GUANO, the "Grand Unified Acoustic Notation Ontology".

Project Goals
Among current manufacturers of bat detectors, and even among models of bat detectors from the same manufacturer, there exists wildly incompatible formats for persisting metadata about echolocation recordings. This severely impacts interoperability during post-processing and analysis.

GUANO aims to provide an open and extensible format which any manufacturer of hardware or software may utilize for persisting metadata, such that their metadata may be semantically interpreted.

This specification also describes the a standard for embedding GUANO metadata inside full-spectrum .WAV files as well as zero-cross Anabat files, which cover the majority of bat acoustic recordings in use. Other file formats are also in use, and manufacturers are invited to explore the application of GUANO metadata to those file formats as well.

Status
This format and specification are in the production phase. There currently exist hardware bat detectors which write GUANO-format recordings, and real-world software which reads and writes GUANO metadata.

GUANO is considered at the "Version 1.0" stage, and though no significant backwards incompatible changes will be made to this 1.0 version of the format, slight clarifications and bugfixes may be made to this specification in order to best address vendor and user concerns. The changelog at the end of this document details all changes to the specification going forward.

Note that mention of manufacturers and products within this specification are used for reference or for example, and do not indicate adoption or endorsement of the GUANO format by those manufacturers unless explicitly stated so.

Definitions and Common Data Conventions
All GUANO metadata must be persisted as UTF-8 Unicode string. This is a multi- byte encoding which uses just a single byte for all "ASCII" data, but a variable number of bytes for encoding "special" characters.

That's right, all data must be written as UTF-8 string. GUANO does not allow a binary representation for floating point data (eg. IEEE 754), but rather requires the base10 string literal representation.

Newlines must be specified with the '\n' linefeed (UTF-8 and ASCII 0x0A) character only.

Multiline strings which need to encode a literal newline should write the two-byte string "\n" ("backslash n", UTF-8 and ASCII 0x5C 0x6E). Correspondingly, software which reads fields that support multiline string values should interpret the two-byte string "\n" as a newline. This embedded newline syntax applies exclusively to fields which specify "multiline string" as their data type. In order to keep this escaping rule as simple as possible, this specification does not define a way to include the literal string "\n"; it should always be interpreted as a newline within a multiline string.

Binary field values should be encoded as Base64 strings as defined in RFC 4648. Newlines may not be inserted into the data, and the "Base 64 Alphabet" must be used.

Extra whitespace may be used when formatting field names and values; whitespace should be trimmed upon reading. This gives writing implementations freedom to optionally format the metadata upon writing for clarity or organization. This also allows writing implementations to initialize a fixed-size block containing only whitespace characters (eg. UTF-8 and ASCII space character 0x20) for performance, then write specific metadata values after actual recording data has been streamed to disk. Because .WAV sample data must be aligned to even byte boundaries, implementations should pad the GUANO metadata sub-chunk with whitespace to an even number of bytes.

Reading implementations should ignore all metadata fields which they do not recognize (for example, new fields from later metadata specification versions, or namespaced manufacturer-specific fields). Editing implementations should persist all unknown metadata fields exactly as read.

Dates, times, and datetimes must appear in one of the following formats, which are subsets of the ISO 8601 and RFC 3339 specifications.

Date

2015-12-31
Time

23:59
23:59:59
23:59:59.123
23:59:59.123456
Local DateTime

2015-12-31T23:59:59
2015-12-31T23:59:59.123
2015-12-31T23:59:59.123456
UTC DateTime

2015-12-31T23:59:59Z
2015-12-31T23:59:59.123Z
2015-12-31T23:59:59.123456Z
UTC Relative DateTime

2015-12-31T23:59:59+04:00
2015-12-31T23:59:59.123+04:00
2015-12-31T23:59:59.123456+04:00
Embedding in WAVE Files
The canonical .WAV file consists of a fmt_ sub-chunk, which provides metadata about the recording data itself, and a data sub-chunk, which contains that primary recording data.

GUANO metadata, when embedded in a .WAV file, must be placed into its own sub-chunk with ID guan. Implementations are free to locate the guan sub-chunk anywhere within the RIFF container they wish. Writing implementations may prefer to place this sub-chunk at the end of the .WAV file (so they can efficiently stream recording data to disk with minimal buffering), while reading implementations may wish it were located at the start (so they don't need to read the entire file into memory). This means that all implementations must conform to the RIFF format and jump sub-chunk to sub-chunk if necessary.

Embedding in Anabat Files
GUANO metadata may be embedded in an Anabat-format zero-cross file by writing the UTF-8 encoded metadata after the data information table, but before the start of the interval data. The GUANO metadata should be padded to an even byte length.

The data pointer at file offset 0x11A must point to the start offset of the interval data itself. This pointer is a little-endian 16-bit unsigned integer, therefore the Anabat file format limits the size of GUANO metadata to a maximum of 65199 bytes (0xFFFF - 0x150 bytes for the header itself). Older software may impose a 32kb total file size limit on Anabat files, but as of 2017 Titley Scientific's own hardware and software are capable of reading and writing arbitrarily large files.

Metadata Format
Namespaces are separated from field keys by the first occurrence of the '|' pipe character, UTF-8 and ASCII 0x7C. Namespaces may not include a '|' character (obviously) or a ':' character.

Field keys are separated from field values by the first occurrence of the ':' colon character, UTF-8 and ASCII 0x3A. Keys may not contain a ':' character (obviously). Keys may contain a '|' character so that vendors may namespace their own vendor-specific fields; for example, PET|D500X|TSens: high could be a value which applies to Pettersson's D500X but not to their other products. Field keys are case sensitive, and whitespace within is significant.

Field values consist of everything after the first ':' character, until the next '\n' newline (or EOF), and after having all surrounding whitespace trimmed. Whitespace is not exhaustively defined here, but should include the non-printing ASCII bytes including null, CR, LF, space, tab, etc.

Empty lines are ignored. In fact, the examples in this document use extra empty lines for legibility, though this is absolutely not a requirement for writing implementations.

The GUANO namespace must occur before any others, and the GUANO|Version field must be the first field in a metadata block. This is to ensure that, if future format changes are incompatible, reading implementations may change their behavior for older format versions. Other than the GUANO namespace restriction, namespaces and field keys may occur in any order. However, keys may not be duplicated within a single file!

Extensible Namespaces
Manufacturers are encouraged to include metadata specific to their own hardware or software. The GUANO specification provides a catalog of common fields, but allows for the inclusion of custom fields.

Custom field names must be namespaced with an identifier. Identifiers should be registered in this document so that they are not inadvertently reused, but manufacturers are free to use as many or as few custom fields as they like (it's your namespace!).

Reserved Namespaces
The following namespaces have been reserved or registered. Any manufacturer who utilizes their own custom GUANO fields is encouraged to add their namespace to this list so that it isn't accidentally used by another manufacturer.

GUANO
This reserved namespace is for meta-metadata pertaining specifically to the GUANO metadata in use.

User
Reserved namespace for user-defined fields.

Anabat
Titley Scientific

BAT
Binary Acoustic Technologies

BATREC
Bat Recorder by Bill Kraus

MSFT
Myotisoft

PET
Pettersson

SB
SonoBat

WA
Wildlife Acoustics - vendor namespace documentation

Example
The following example is the embedded GUANO metadata for a direct-recorded (no time-expansion) full-spectrum recording made with a Pettersson D1000X, then auto-classified with SonoBat, and subsequently manually vetted::

GUANO|Version:  1.0

Timestamp:  2012-03-29T03:58:01+04:00
Species Auto ID:  MYLU
Species Manual ID:  Myosod
Tags:  hand-release, voucher, workshop
Note:  Hand release of male Indiana Bat caught in triple-high net at Mammoth Cave Historic Ent.\nReleased in low-clutter 100m diameter clearing, bat flew directly overhead, circled once, then darted off into cluttered forest.\n\nRecorded by David Riggs with Pettersson D1000X at 2014 BCM acoustic workshop.
TE:  1
Samplerate:  500000
Length:  6.5
Filter HP:  20.0
Make:  Pettersson
Model:  D1000X
Loc Position:  37.1878016 -86.1057312
Loc Accuracy:  20
Loc Elevation:  228.6

SB|Version:  3.4
SB|Classifier:  US Northeast
SB|DiscrProb:  0.913
SB|Filter:  20kHz Anti-Katydid

PET|Gain:  80
PET|Firmware:  1.0.4 (2009-11-25)
Defined Fields
Writing implementations, whenever possible, are encouraged to utilize fields from the following defined or "well-known" list.

Reading implementations should expect to encounter any of the following fields in a compliant GUANO file.

GUANO|Version
required, string. GUANO metadata version in use. Not only is this field required, but it must be the first field that appears within a GUANO metadata subchunk. Its value is a string, which may be compared lexicographically, and which defines the GUANO specification version that the file conforms to. This specification defines version 1.0.

Filter HP
optional, float. High-pass filter frequency, in kHz.

Filter LP
optional, float. Low-pass filter frequency, in kHz.

Firmware Version
optional, string. Device's firmware version, in manufacturer's own descriptive format.

Hardware Version
optional, string. Device's hardware revision or hardware options, in manufacturer's own descriptive format.

Humidity
optional, float. Relative humidity as a percentage in the range 0.0 - 100.0.

Length
optional, float. Recording length, in seconds. This should be the "actual length", which will be identical to the .WAV length for direct-recorded files, but will be calculated for time-expanded recordings (.WAV length divided by TE factor).

Loc Accuracy
optional, float. Location accuracy, in meters. This should be the Estimated Position Error (EPE); this statistical range states that 68% of measurements will fall within this radius, 95% of measurements will fall within twice this radius. EPE is calculated differently by different GPS receiver manufacturers, therefore it should be stressed that this value is merely an estimate of accuracy. Detector manufacturers may opt to estimate accuracy more coarsely if EPE is not available directly from their GPS receiver, but should express the value in the same one-sigma fashion.

Loc Elevation
optional, float. Elevation / altitude above mean sea level, in meters.

Loc Position
optional, (float float). Location that the recording was made, as a WGS84 latitude longitude tuple.

Make
optional, string. Manufacturer of the recording hardware.

Model
optional, string. Model name or number of the recording hardware.

Note
optional, multiline string. Freeform textual note associated with the recording.

Original Filename
optional, string. The original filename as used by the recording hardware. Editing implementations should persist this value after renaming and/or editing a file as a sort of "paper trail".

Samplerate
optional, integer. Recording samplerate, in Hz. This should be equal to the .WAV samplerate for direct-recording detectors, but should be a product of TE and the .WAV samplerate for time-expansion detectors.

Serial
optional, string. Serial number or unique identifier of the recording hardware.

Species Auto ID
optional, list of strings. Species or guild classifications, as determined by automated classification. This field allows a comma-separated list of values, however some reading implementations may only be able to handle a single species per file; therefore the most "dominant" or "primary" species present in a file, when applicable, should be the first value in this list.

Species Manual ID
optional, list of strings. Species or guild classifications, as determined by a human. This field allows a comma-separated list of values, however some reading implementations may only be able to handle a single species per file; therefore the most "dominant" or "primary" species present in a file, when applicable, should be the first value in this list.

Tags
optional, list of strings. A comma-separated list of arbitrary strings so that end users may easily apply any tags / labels that they see appropriate.

TE
optional, integer. Time-expansion factor. If not specified, then 1 (no time-expansion, aka direct-recording) is assumed.

Temperature Ext
optional, float. External temperature in degrees Celsius. This is the temperature outside the device's housing - the "ambient" temperature.

Temperature Int
optional, float. Internal temperature in degrees Celsius. This is the temperature as measured inside the device's housing, where there is an expectation of some variance from actual "ambient" temperature.

Timestamp
required, datetime. Date and time of the start of the recording, in ISO 8601 compatible format (see datetime specification above). It is very strongly recommended that, if UTC offset is known, it is explicitly specified rather than recording the timestamp only in UTC "zulu" time. This is because local time is overwhelmingly more important when it comes to bat echolocation data than is absolute UTC time; unfortunately GPS receivers provide only UTC time, and the local UTC offset for a location may vary according to political boundaries.

Specification History
2017-01-15 | 1.0.0 | Updated GUANO specification status to reflect production nature of format. Allow multiple values for Species Auto ID and Species Manual ID. Added Serial and Original Filename fields. Removed redundant GUANO|Size field. Describe embedding GUANO metadata within an Anabat file. Re-added WA vendor namespace for Wildlife Acoustics.

2016-05-15 | 0.0.4 | Added BATREC vendor namespace for Android Bat Recorder by Bill Kraus. Separated Temperature field into Temperature Ext and Temperature Int.

2016-03-02 | 0.0.3 | Clarified Base64 encoding of binary data. Added User namespace. Removed mention of UTF-8 endianness.

2016-01-30 | 0.0.2 | Added well-known fields: Hardware Version, Firmware Version, Temperature, Humidity.
Clarified Loc Position description.

2015-10-12 | 0.0.1 | Initial public release of draft GUANO specification with reference Python implementation

2014-10-03 | 0.0.0 | Initial private draft of GUANO metadata specification.

Notes
The use of manufacturer or product names in this specification does not imply endorsement, support, or any other association by those manufacturers or products; nor does it imply compliance with the GUANO specification.

Standardized GUANO fields
Field name	Data type	Description
GUANO|Version	text	1.0
Filter HP	float	High-pass filter frequency in kHz
Filter LP	float	Low-pass filter frequency in kHz
Firmware Version	text	Recorder firmeare version
Hardware Version	text	Recorder hardware version
Humidity	float	Relative humidity as a percentage
Length	float	Recording length in seconds
Loc Accuracy	float	Estimated Position Error in meters
Log Elevation	float	Elevation/altitude above mean sea level in meters
Loc Position	float float	WGS84 latitude and longitude
Make	text	Manufacturer of the recorder hardware
Model	text	Model name or number of the recording hardware
Note	text (muli-line)	Freeform textual note associated with the recording
Original Filename	text	Original filename before subsequent renaming during processing
Samplerate	integer	Recording sample rate, Hz
Serial	text	Serial number or unique identifier of recording hardware
Species Auto ID	text	Comma separated list of automatic classification species
Species Manual ID	text	Comma separated list of human-verified species
Tags	text	Comma separated list of arbitrary tags or labels
TE	integer	Time-expansion factor. If not specified, then 1 (no time-expansion a.k.a. direct-recording) is assumed.
Temperature Ext	float	External temperature in degrees Celsius outside the recorder's housing
Temperature Int	float	Internal temperature in degrees Celsius inside the recorder's housing
Timestamp	datetime	Date and time of the start of the recordinge (ISO 8601 with caveats)


Wildlife Acoustics GUANO Namespace
Field name	Data type	Description
WA|Attribution	text	To share files, you can specify how you would like to be attributed by others who reference your data
WA|Copyright	text	To share files, you can specify a copyright notice to be associated with your data
WA|Kaleidoscope|Auto ID	Text	Auto ID assignments generated by Kaleidoscope, like "Species Auto ID" This facilitates multiple programs to add auto id labels to the same files. The most recently used would overwrite the global "Species Auto ID", but the Kaleidoscope-specific ID is saved here. Presumably other programs will have other program-specific equivalents.
WA|Kaleidoscope|Channel	Integer	When splitting multi-channel (stereo) recordings into individual mono recordings, Kaleidoscope writes this metadata to the output file indicating which channel on the original recording represents the source of the data.
WA|Kaleidoscope|Classifier|Settings	JSON-encoded Text	Classifier settings used to run the auto-id with the following JSON objects:
    min freq - float minimum frequency, Hz
    max freq - float maximum frequency, Hz
    min dur - float minimum pulse duration, s
    max dur - float maximum pulse duration, s
    min calls - integer - minimum number of pulses
    enhance - text - signal enhancement "on" or "off"
    sensitivity - text - "liberal", "balanced" or "conservative"
    species - array of strings - list of species codes selected
    WA|Kaleidoscope|Classifier|Statistics	JSON-encoded Text	Auto ID classification results with the following JSON objects:
    id - text - Auto ID species code result
    score - float - "margin" value
    pulses - integer - number of pulses detected
    matching - integer - number of pulses matching the Auto ID result
    match ratio - float - ratio of matching/pulses
    alternates - array of strings - alternate possible identifications
    Fc - float - mean pulse characteristic frequency, kHz
    Sc - float - mean pulse characteristic slope, OPS
    Dur - float - mean pulse duration, ms
    Fmax - float - mean pulse maximum frequency, kHz
    Fmin - float - mean pulse minimum frequency, kHz
    Fmean - float - mean pulse mean frequency, kHz
    TBC - float - mean time between pulses, ms
    Fk - float - mean pulse frequency of knee, kHz
    Tk - float - mean pulse time of knee, ms
    S1 - float - mean pulse initial slope, OPS
    Tc - float - mean pulse time of characteristic, ms
    Qual - float - mean pulse quality ratio
WA|Kaleidoscope|Classifier|Version	text	Name and version of the classifier
WA|Kaleidoscope|Cluster|Settings	JSON-encoded text	Kaleidoscope cluster settings
    min freq - float - minimum frequency, Hz
    max freq - float - maximum frequency, Hz
    min dur - float - minimum duration, s
    max dur - float - maximum duration, s
    max gap - float - maximum gap, s
    mode - text - clustering mode pass1, pass2, scan or scan-null
    win - float - window, seconds
    max states - integer - maximum number of states in model
    max clusters - integer - maximum number of clusters to form
    max dist merge - float - maximum distance used to merge clusters
    max dist scan - float - maximum distance used to filter results
    WA|Kaleidoscope|Cluster|Statistics	JSON-encoded text	Kaleidoscope cluster results
    offset - float - offset to detection, seconds
    duration - float - duration of detection, seconds
    fmin - float - minimum frequency of setected signal, Hz
    fmean - float - mean frequency of setected signal, Hz
    fmax - float - maximum frequency of setected signal, Hz
    cluster - array of 3 strings indicating top 3 cluster names
    distance - array of 3 floats indicating top 3 distances
WA|Kaleidoscope|Compression	text	Describes compression algorithm used in writing WAV files if any (e.g. "W4V-8")
WA|Kaleidoscope|Conversion	text	Describes any conversion from input file to this file as one of:
WAC to WAV
WAC to ZC
WAV to ZC
ZC to WAV
WA|Kaleidoscope|Fingerprint	text	A unique fingerprint corresponding to the raw data samples or zero crossing timings associated with a full spectrum or zero crossing audio file
WA|Kaleidoscope|GPS Fuzz	float	GPS Fuzz precision used to obfuscate location coordinates to the nearest grid center. For example, a value of 0.1 would round GPS latitude and longitude coordinates to the nearest 0.1 degree.
WA|Kaleidoscope|Acoustic Index|Settings	JSON-encoded text	Acousic index module settings:
    NDSI
    fft - integer - fft window size
    anthro_min - float - minimum frequency for anthrophony (Hz)
    anthro_max - float - maximum frequency for anthrophony (Hz)
    bio_min - float - minimum frequency for biophony (Hz)
    bio_max - float - maximum frequency for biophony (Hz)
    ACI
    fft - integer - fft window size
    fmin - float - minimum frequency (Hz)
    fmax - float - maximum frequency (Hz)
    j - float - value of J (s)
    ADI
    fmax - float - maximum frequency (Hz)
    fstep - float - step frequency (Hz)
    thold - float - threshold (dB re peak signal)
    AEI
    fmax - float - maximum frequency (Hz)
    fstep - float - step frequency (Hz)
    thold - float - threshold (dB re peak signal)
    BI
    fft - integer - fft window size
    fmin - float - minimum frequency (Hz)
    fmax - float - maximum frequency (Hz)
    SPEC
    fft - integer - fft window size
    fmin - float - minimum frequency (Hz)
    fmax - float - maximum frequency (Hz)
    QUT
    fft - integer - fft window size
    thold - float - threshold (dB re noise floor)
WA|Kaleidoscope|Acoustic Index|Statistics	JSON-encoded text	Acoustic index results (array by channel), floating point values of specific indexes
    MEAN
    SD
    SEM
    MEDIAN
    MODE
    Q25
    Q75
    IQR
    SKEW
    KURT
    SFM
    SH
    NDSI
    ACI
    ADI
    AEI
    BI
    BGN
    SNR
    ACT
    EVN
    LFC
    MFC
    HFC
    CENT
WA|Kaleidoscope|SPL|Settings	JSON-encoded text	SPL analysis module settings:
    period - the reporting sample period in seconds
    adjust - decibel adjustment
    SEL on - event onset threshold, dB
    SEL off - event offset threshold, dB
    WA|Kaleidoscope|SPL|Statistics	JSON-encoded text	SPL analysis results (array by channel)
    samples - audio sample in measurement, seconds
    correction - total correction factor, dB
    name of band (repeated for selected bands)
    min - minimum measurement, dB
    max - maximum measurement, dB
    mean - mean measurement, dB
    SELcum - cumulative Sound Exposure Level, dB*sec
WA|Kaleidoscope|Offset	float	Offset of result from input file in seconds
WA|Kaleidoscope|Version	text	Kaleidoscope software version
WA|Kaleidoscope|License	text	To share files, you can specify the type of licence under which you are willing to share your data. Choices include none (private), public domain, and various creative commons licenses.
WA|Song Meter|Audio settings	JSON-encoded text	Song Meter settings (converted from WAMD metadata) including the following JSON objects in a per-channel array:
    rate - integer - samplerate (samples per second)
    mic - text - microphone type e.g. "U1"
    gain - float - total gain in dB
    hpf - float - high-pass filter, Hz
    trig level - float - trigger level, dB
    trig window - float - trigger window, s
    trig max len - float - trigger maximum length, s
    trig min freq - float - trigger minimum frequency, Hz
    trig max freq - float - trigger maximum frequency, Hz
    trig min dur - float - trigger minimum duration, s
    trig max dur - float - trigger maximum duration, s
WA|Song Meter|Compression	text	The compression used by the Song Meter if any, converted from WAMD metadata, (e.g. "W4V-8")
WA|Song Meter|Prefix	text	The file prefix, if any, converted from WAMD metadata
    Internal GUANO tags used in Kaleidoscope 5 for database interfaces
    Field name	Data type	Description
WA|*ACCESS	text	Set to 0 for private or 1 for public access to data
WA|*BATCHFINGERPRINT	text	Unique fingerprint checksum for a given batch job
WA|*BATCHLABEL	text	A user-defined label to identify a batch job
WA|*BATCHRECORDSBYTES	integer	Size of batch database records (uncompressed .wdb (Wildlife Acoustics Databse) file, in bytes.
WA|*BATCHRECORDSRECORDINGS	integer	Number of recording records
WA|*BATCHRECORDSAUTOIDS	integer	Number of autoid records
WA|*BATCHRECORDSCLUSTERS	integer	Number of cluster records
WA|*CHANNEL	integer	The input file channel used to create outputs
WA|*DIVRATIO	integer	The zero crossing division ratio corresponding to a file
WA|*DRIVELABEL	text	A user-defined label to identify a location (e.g. external disk drive) corresponding to a file
WA|*FILE	text	The filename (with extension, but without directories)
WA|*FINGERPRINT	text	A unique fingerprint corresponding to the raw data samples or zero crossing timings associated with a full spectrum or zero crossing audio file
WA|*FOLDER	text	The folder path relative to the input directory to the input file
WA|*INDIR	text	The absolute input directory path
WA|*INDRIVELABEL	text	A user-defined label to identify a location (e.g. external disk drive) corresponding to an input file
WA|*INFILE	text	The input filename (with extension, but without directories)
WA|*INPATH	text	The absolute path name of the input file
WA|*INPATHID	integer	A unique internal temporary id corresponding to an input file
WA|*INPATHMD5	text	The MD5 hash of WA|*INPATH used as a unique lookup key
WA|*NCHANNELS	text	The number of audio channels in a file
WA|*NOTEID	integer	A unique internal temporary id corresponding to a unique Note
WA|*NOTEMD5	text	The MD5 hash of a Note used as a unique lookup key
WA|*OFFSET	float	The offset in seconds into an audio file corresponding to a result
WA|*ORGID	text	The unique Kaleidoscope Cloud account UUID corresponding to the source of a database entry
WA|*OUTDIR	text	The absolute output directory path
WA|*OUTDRIVELABEL	text	A user-defined label to identify a location (e.g. external disk drive) corresponding to an output file
WA|*OUTFILE	text	The output filename (with extension, but without directories)
WA|*OUTFILEFS	text	The full spectrum output filename (with extension, but without directories)
WA|*OUTFILEZC	text	The zero crossing output filename (with extension, but without directories)
WA|*OUTPATHFS	text	The absolute path name of the full spectrum output file
WA|*OUTPATHZC	text	The absolute path name of the zero crossing output file
WA|*OUTPATHIDFS	integer	A unique internal temporary id corresponding to a full spectrum output file
WA|*OUTPATHIDZC	integer	A unique internal temporary id corresponding to a zero crossing output file
WA|*OUTPATHMD5FS	text	The MD5 hash of WA|*OUTPATHFS used as a unique lookup key
WA|*OUTPATHMD5ZC	text	The MD5 hash of WA|*OUTPATHZC used as a unique lookup key
WA|*PATH	text	The absolute path name of the file
WA|*PATHID	integer	A unique internal temporary id corresponding to the file
WA|*PATHMD5	text	The MD5 hash of WA|*PATH used as a unique lookup key
WA|*PROFILEID	integer	A unique internal temporary id corresponding to a settings profile
WA|*REVIEWORGID	text	The unique Kaleidoscope Cloud account UUID corresponding to the source of a review entry
WA|*REVIEWUSERID	text	The user nickname (or email address if no nickname is specified) source of a review entry
WA|*SETTINGS0	JSON-encoded text	The recorder settings for the left channel (channel 0) derived from "WA|Song Meter|Audio Settings"
WA|*SETTINGS1	JSON-encoded text	The recorder settings for the right channel (channel 1) derived from "WA|Song Meter|Audio Settings"
WA|*TIMESTAMP	datetime	Current timestamp for batches and reviews
WA|*USERID	text	The user nickname (or email address if no nickname is specified) source of a database entry

##################################################################################################################################
##################################################################################################################################
wamd Metadata

Kaleidoscope Meta Data (Wildlife Acoustics Meta Data
"WAMD" Format)
Kaleidoscope makes use of the following meta data fields if available in the recording:
Voice note
An embedded audio notation such as those created by the Echo Meter Touch. The icon
button will appear if a voice note is present, and clicking the button will play the
voice note recording.
Prefix
The user-defined file prefix.
Model
The recorder model name.
Serial Number
The recorder serial number.
Firmware
The recorder firmware version.
Timestamp
The date and time a recording was made.
Copyright © 2017 Wildlife Acoustics, Inc. 13
Kaleidoscope 4.3.1 Wildlife Acoustics, Inc.
GPS Location
If a GPS receiver was attached to the recorder, the GPS coordinates corresponding to
where the recording was made may be available.
Notes
Field notes created, edited and viewed by humans that could be used to describe the field
and deployment conditions in great detail.
Auto Identification Results
The automatic identification made to species by Kaleidoscope's Auto ID for Bats
Manual Identification Results
The manually verified identification made to species by a human expert.
Microphone Sensitivity
Calibrated microphone sensitivities saved in the recorder and used by the noise analysis
module
Mapping AnalookW Meta Data to Kaleidoscope
For .??# or .zc files manipulated by AnalookW software, there are several meta data fields
mapped to and from Kaleidoscope meta data fields as follows:
AnalookW
Meta Data
Kaleidoscope Meta
Data Additional Comments
Tape Notes A line in the Notes field that begins with "Tape: "
Loc Notes A line in the Notes field that begins with "Location: "
Spec Notes A line in the Notes field that begins with "Spec: "
Notes Notes Additional lines in the Notes field
Filetime Timestamp
Lat, Lon GPS Location
Species
Automatic
Identification
Results and Manual
Identification
Results
The "Species" field in AnalookW is formatted as
"AUTOID (KS AUTOID,STATS)" or "MANUALID !(KS
AUTOID,STATS)" where AUTOID is the automatic
classification, MANUALID is the manually verified
classification, and STATS are Kaleidoscope statistics. Note
that older versions of Kaleidoscope used "Kaleidoscope"
instead of "KS" as shown above. This was shortened to
Copyright © 2017 Wildlife Acoustics, Inc. 14
Kaleidoscope 4.3.1 Wildlife Acoustics, Inc.
allow for more available space in this field for other uses.
At 4.3.1 and later, the statistics are replaced with alternate
identifications.

foreach (var entry in entries)
                switch (entry.Key)
                {
                    case 0x000A:
                        m_Note = entry.Value;
                        m_Note = m_Note.Replace(@"\n", "");
                        result = true;
                        break;

                    case 0x0005:
                        var dt = new DateTime();
                        if (DateTime.TryParse(entry.Value, out dt))
                        {
                            m_MetaDate = dt;
                            m_Start = m_Start != null ? dt < m_Start.Value && dt.Year > 1960 ? dt : m_Start : dt;

                            if (m_Duration != null) m_End = m_Start + m_Duration;
                            result = true;
                        }

                        break;

                    case 0x000C:
                        if (string.IsNullOrWhiteSpace(m_ManualID)) m_ManualID = "";
                        if (!m_ManualID.Contains(entry.Value.Trim())) // no need to duplicate if this string already present
                        {
                            m_ManualID = (m_ManualID + " " + entry.Value).Trim();
                        }
                        result = true;
                        break;

                    case 0x000B:
                        if (string.IsNullOrWhiteSpace(m_AutoID)) m_AutoID = "";
                        if (!m_AutoID.Contains(entry.Value.Trim())) // no need to duplicate if this string already present
                        {
                            m_AutoID = "(" + (entry.Value + " " + m_AutoID).Trim() + ")";
                        }
                        result = true;
                        break;

                    case 0x000E: //AUTO_ID_STATS
                        if (string.IsNullOrWhiteSpace(m_AutoID)) m_AutoID = "";
                        if (m_AutoID.EndsWith(")")) m_AutoID = m_AutoID.Substring(0, m_AutoID.Length - 1);
                        m_AutoID = m_AutoID + ": " + entry.Value + ")";
                        result = true;
                        break;

                    case 0x0006: // GPS_FIRST
                        if (m_Location == null || (m_Location.m_Latitude == 0.0d && m_Location.m_Longitude == 0.0d) ||
                            Math.Abs(m_Location.m_Latitude) > 90.0d || Math.Abs(m_Location.m_Longitude) > 180.0d)
                        {
                            m_Location = new GPSLocation(entry.Value);
                        }
                        result = true;
                        break;

                    case 0x0001:
                        m_Device = entry.Value;
                        result = true;
                        if (entries.ContainsKey(0x0002)) m_Device = m_Device + " " + entries[0x0002];
                        if (entries.ContainsKey(0x0003)) m_Device = m_Device + " " + entries[0x0003];
                        break;

                    case 0x0012:
                        m_Microphone = entry.Value;
                        result = true;
                        if (entries.ContainsKey(0x0013)) m_Microphone = m_Microphone + " " + entries[0x0013];
                        break;

                    case 0x0015: //TEMP_INT
                        if (!string.IsNullOrWhiteSpace(m_Temperature)) m_Temperature = entry.Value;
                        result = true;
                        break;

                    case 0x0016: //TEMP_EXT
                        m_Temperature = entry.Value;
                        result = true;
                        break;

                    case 0x0008: //SOFTWARE
                        m_Software = entry.Value;
                        result = true;
                        break;
                }

####################################################################################################################################
####################################################################################################################################
Anabat .zc Metadata

Anabat Sequence File TYPE 132
Hex offsets into file, in bytes
(words are arranged with the low byte at the lower offset)

0000 word 2 byte pointer to data information table (= 011ah)
0002 byte 00
0003 byte constant 132 - identifies this file structure.
0004 byte 00
0005 byte 00

0006 275 bytes TEXT HEADER

Data information table

011a word 2 byte pointer to first data byte (=0150h)
(contains file offset of first data byte)
011c word RES1
011e byte DIVRATIO
011f byte VRES at which file made

Date and time at start of file
0120 word year (eg 2001)
0122 byte month (Jan=1,Dec=12)
0123 byte day (1st=1 etc)
0124 byte hour (0-23)
0125 byte minute (0-59)
0126 byte second (0-59)
0127 byte hundredsth of a second (0-99)
0128 word microseconds (0-9999)

012a 6 byte ID code

0130-014f 32 bytes GPS position data
0-9    0130-0139 10 bytes specifying datum

10    013a if numeric, specifies UTM data (included in first 3-byte field)
    10-12    013a-013c 3 bytes for Zone (eg "10S")
    13    013d char(32)
    14-19    013e-0143 6 bytes for Easting in metres
    20    0144 char(32)
    21-27    0145-014b 7 bytes for Northing in metres

10    013a if 'N' or 'S', specifies Degree data
11-12    013b-013c 2 bytes for latitude Degrees
13-17    013d-0141 5 bytes for decimal Degrees
18    0142 char(32)
19    0143 'W' or 'E'
20-22    0144-0146 3 bytes for longitude Degrees
23-27    0147-014b 5 bytes for decimal Degrees

28-31    014c-014f 4 bytes for Altitude in metres (-999 to 9999)

{ Optional block of guano data
150- GUANO|Version:1.0

normally formatted Guano data with 0A line seperators
upto byte specified in word at 011a}

0150 n bytes DATA

One to four bytes of data are used to represent time, in microseconds, between
CONSECUTIVE TRANSITIONS. These data bytes are interpreted according to the
following rules:

If bit7 = 0 ( 0 <= byte <= 7Fh )

only one byte is used. The remaining 7 bits form a signed, twos complement number (between -64 and 63) which is added to the value of the previous time interval to derive the value of the current time interval.

if bit 7 = 1, bit 6 = 0, bit 5 = 0 ( 80h <= byte <= 9Fh)

next time interval is contained in 13 bits, upper 5 from the remainder of this byte, lower 8 bits from the next byte.

if bit 7 = 1, bit 6 = 0, bit 5 = 1 (A0h <= byte <= BFh)

next tme interval is contained in 21 bits, upper 5 from the remainder of this byte, next 8 from the next byte and the lower 8 from the byte after that.

if bit 7 = 1, bit 6 = 1 bit 5 = 0(C0h <= byte <= DFh)

next time interval is contained in 29 bits, the upper 5 from the remainder of this byte, the next 8 from the following byte etc. Note that in this case, bits 0-4 of this byte will all be 0 in a file with a maximum duration of 15 seconds.

if bit 7 = 1, bit 6 = 1 bit 5 = 1 (E0h <= byte <= FFh)

lower 5 bits represent a status value which is set for the number of points contained in the next byte. At this stage (June 99) only 4 status values are defined:

0 - point is out of range
1 - point is turned off
2 - point is normal dot
3 - point is maindot

so bits 2 to 4 are all zero and in practice, only values of E1h or E3h will be used. So if this and the next byte were E1h and 5, that would turn off the five next data points. The points E3h and 7 would make the next 7 data points maindots.

examples:

0 same as previous
5 previous + 5
63 (3Fh) previous + 63
118 (76h) previous - 10
64 (40h) previous - 64
128,27 (80h,1Bh) 27 (1Bh)
131,43 (83h,2Bh) 811 (32Bh)
159,255 (9Fh,FFh) 8191 (1FFFh)
160,0,33 (A0h,0,21h) 33 (21h)
191,255,255 (BFh,FFh,FFh) 2097151 (1FFFFFh)
192,255,255,255 (C0h,FFh,FFh,FFh) 16777215 (FFFFFFFh)
225,1 (E1h,1) turn off next data point
225,255 (E1h,FFh) turnoff next 255 points
227,3 (E3h,3) next 3 points are maindots
227,255 (E3h,FFh) next 255 points are maindots

Thanks to Chris Phillips for pointing out errors in the text above.

Back to: File Format Contents, Anabat Technical Notes, Anabat Contents, Home

Explanation of terms used
TEXT HEADERS
Text Headers consist of 275 ASCII bytes ordered into the following fields:

TAPE     8 bytes
DATE     8 bytes
LOC     40 bytes
SPECIES 50 bytes
SPEC    16 bytes
NOTE    73 bytes
NOTE1   80 bytes
In practice, NOTE1 appears as the second line of NOTE.

DIVRATIO
The division ratio used in the recording. This is the value which the original signal frequency has been divided by before input to the ZCAIM.

SCALE
The vertical (frequency) resolution of the graph in Herz. SCALE is the number of Herz represented by the distance between 2 adjacent lines in the vertical axis.

VRES
This value is used to determine what value of SCALE is to be used. The value (VRES AND 70h)/16 is used to lookup a table which gives SCALE, ie:

(VRES AND 70h)/16      SCALE
        0               10
        1                25
        2                50
        3               100
        4               250
        5               500
        6              1000
        7              2500
The lower nibble of VRES may contain a value which is used to decide which of three possible vertical axes to draw on the graph.

RES1
is the number of counts (derived from ZCAIM) which represent a time interval of 25ms. = 25000 unless recalibration is in effect.

TRANSITION
A change in the input signal from -ve to +ve (positive going) or from +ve to -ve (negative going). The ZCAIM outputs a value which is the time (in us) since the previous transition (of opposite sign). Note that CONSECUTIVE TRANSITIONS have opposite signs, while LIKE TRANSITIONS have the same sign and are separated by a transition of opposite sign. Frequency calculations use the time between LIKE TRANSITIONS.

The term TRANSITION can be used in two different ways. In several places in the Anabat software, the term is used to denote TRANSITIONS in the original bat call, while in the sense used here, in explaining the file formats, it is used to denote a TRANSITION as seen by the ZCAIM. Because of the way an Anabat detector works, each TRANSITION at the output of the detector, and hence the input to the ZCAIM, will have resulted from counting a number of TRANSITIONS in the original sugnal.

Back to: File Format Contents, Anabat Technical Notes, Anabat Contents, Home