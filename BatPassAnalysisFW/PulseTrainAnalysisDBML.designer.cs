#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatPassAnalysisFW
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PTADebugDatabase")]
	public partial class PulseTrainAnalysisDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPTAPass(PTAPass instance);
    partial void UpdatePTAPass(PTAPass instance);
    partial void DeletePTAPass(PTAPass instance);
    partial void InsertPTASegment(PTASegment instance);
    partial void UpdatePTASegment(PTASegment instance);
    partial void DeletePTASegment(PTASegment instance);
    partial void InsertPTAPulse(PTAPulse instance);
    partial void UpdatePTAPulse(PTAPulse instance);
    partial void DeletePTAPulse(PTAPulse instance);
    partial void InsertPTARecording(PTARecording instance);
    partial void UpdatePTARecording(PTARecording instance);
    partial void DeletePTARecording(PTARecording instance);
    #endregion
		
		public PulseTrainAnalysisDBMLDataContext() : 
				base(global::BatPassAnalysisFW.Properties.Settings.Default.PTADebugDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PulseTrainAnalysisDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PulseTrainAnalysisDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PulseTrainAnalysisDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PulseTrainAnalysisDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PTAPass> PTAPasses
		{
			get
			{
				return this.GetTable<PTAPass>();
			}
		}
		
		public System.Data.Linq.Table<PTASegment> PTASegments
		{
			get
			{
				return this.GetTable<PTASegment>();
			}
		}
		
		public System.Data.Linq.Table<PTAPulse> PTAPulses
		{
			get
			{
				return this.GetTable<PTAPulse>();
			}
		}
		
		public System.Data.Linq.Table<PTARecording> PTARecordings
		{
			get
			{
				return this.GetTable<PTARecording>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTAPass")]
	public partial class PTAPass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTAPassID;
		
		private int _OffsetInSegmentInSamples;
		
		private int _PassLengthInSamples;
		
		private short _PassNumber;
		
		private int _Segment;
		
		private System.Nullable<double> _EnvelopeThresholdFactor;
		
		private System.Nullable<double> _SpectrumThresholdFactor;
		
		private EntitySet<PTAPulse> _PTAPulses;
		
		private EntityRef<PTASegment> _PTASegment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTAPassIDChanging(int value);
    partial void OnPTAPassIDChanged();
    partial void OnOffsetInSegmentInSamplesChanging(int value);
    partial void OnOffsetInSegmentInSamplesChanged();
    partial void OnPassLengthInSamplesChanging(int value);
    partial void OnPassLengthInSamplesChanged();
    partial void OnPassNumberChanging(short value);
    partial void OnPassNumberChanged();
    partial void OnSegmentChanging(int value);
    partial void OnSegmentChanged();
    partial void OnEnvelopeThresholdFactorChanging(System.Nullable<double> value);
    partial void OnEnvelopeThresholdFactorChanged();
    partial void OnSpectrumThresholdFactorChanging(System.Nullable<double> value);
    partial void OnSpectrumThresholdFactorChanged();
    #endregion
		
		public PTAPass()
		{
			this._PTAPulses = new EntitySet<PTAPulse>(new Action<PTAPulse>(this.attach_PTAPulses), new Action<PTAPulse>(this.detach_PTAPulses));
			this._PTASegment = default(EntityRef<PTASegment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTAPassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PTAPassID
		{
			get
			{
				return this._PTAPassID;
			}
			set
			{
				if ((this._PTAPassID != value))
				{
					this.OnPTAPassIDChanging(value);
					this.SendPropertyChanging();
					this._PTAPassID = value;
					this.SendPropertyChanged("PTAPassID");
					this.OnPTAPassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffsetInSegmentInSamples", DbType="Int NOT NULL")]
		public int OffsetInSegmentInSamples
		{
			get
			{
				return this._OffsetInSegmentInSamples;
			}
			set
			{
				if ((this._OffsetInSegmentInSamples != value))
				{
					this.OnOffsetInSegmentInSamplesChanging(value);
					this.SendPropertyChanging();
					this._OffsetInSegmentInSamples = value;
					this.SendPropertyChanged("OffsetInSegmentInSamples");
					this.OnOffsetInSegmentInSamplesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassLengthInSamples", DbType="Int NOT NULL")]
		public int PassLengthInSamples
		{
			get
			{
				return this._PassLengthInSamples;
			}
			set
			{
				if ((this._PassLengthInSamples != value))
				{
					this.OnPassLengthInSamplesChanging(value);
					this.SendPropertyChanging();
					this._PassLengthInSamples = value;
					this.SendPropertyChanged("PassLengthInSamples");
					this.OnPassLengthInSamplesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassNumber", DbType="SmallInt NOT NULL")]
		public short PassNumber
		{
			get
			{
				return this._PassNumber;
			}
			set
			{
				if ((this._PassNumber != value))
				{
					this.OnPassNumberChanging(value);
					this.SendPropertyChanging();
					this._PassNumber = value;
					this.SendPropertyChanged("PassNumber");
					this.OnPassNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Segment", DbType="Int NOT NULL")]
		public int Segment
		{
			get
			{
				return this._Segment;
			}
			set
			{
				if ((this._Segment != value))
				{
					if (this._PTASegment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentChanging(value);
					this.SendPropertyChanging();
					this._Segment = value;
					this.SendPropertyChanged("Segment");
					this.OnSegmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnvelopeThresholdFactor", DbType="Float")]
		public System.Nullable<double> EnvelopeThresholdFactor
		{
			get
			{
				return this._EnvelopeThresholdFactor;
			}
			set
			{
				if ((this._EnvelopeThresholdFactor != value))
				{
					this.OnEnvelopeThresholdFactorChanging(value);
					this.SendPropertyChanging();
					this._EnvelopeThresholdFactor = value;
					this.SendPropertyChanged("EnvelopeThresholdFactor");
					this.OnEnvelopeThresholdFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpectrumThresholdFactor", DbType="Float")]
		public System.Nullable<double> SpectrumThresholdFactor
		{
			get
			{
				return this._SpectrumThresholdFactor;
			}
			set
			{
				if ((this._SpectrumThresholdFactor != value))
				{
					this.OnSpectrumThresholdFactorChanging(value);
					this.SendPropertyChanging();
					this._SpectrumThresholdFactor = value;
					this.SendPropertyChanged("SpectrumThresholdFactor");
					this.OnSpectrumThresholdFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTAPass_PTAPulse", Storage="_PTAPulses", ThisKey="PTAPassID", OtherKey="Pass")]
		public EntitySet<PTAPulse> PTAPulses
		{
			get
			{
				return this._PTAPulses;
			}
			set
			{
				this._PTAPulses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTASegment_PTAPass", Storage="_PTASegment", ThisKey="Segment", OtherKey="PTASegmentID", IsForeignKey=true)]
		public PTASegment PTASegment
		{
			get
			{
				return this._PTASegment.Entity;
			}
			set
			{
				PTASegment previousValue = this._PTASegment.Entity;
				if (((previousValue != value) 
							|| (this._PTASegment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PTASegment.Entity = null;
						previousValue.PTAPasses.Remove(this);
					}
					this._PTASegment.Entity = value;
					if ((value != null))
					{
						value.PTAPasses.Add(this);
						this._Segment = value.PTASegmentID;
					}
					else
					{
						this._Segment = default(int);
					}
					this.SendPropertyChanged("PTASegment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PTAPulses(PTAPulse entity)
		{
			this.SendPropertyChanging();
			entity.PTAPass = this;
		}
		
		private void detach_PTAPulses(PTAPulse entity)
		{
			this.SendPropertyChanging();
			entity.PTAPass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTASegment")]
	public partial class PTASegment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTASegmentID;
		
		private System.TimeSpan _StartTimeInRec;
		
		private System.TimeSpan _Duration;
		
		private string _Comment;
		
		private int _Recording;
		
		private short _SegmentNumber;
		
		private EntitySet<PTAPass> _PTAPasses;
		
		private EntityRef<PTARecording> _PTARecording;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTASegmentIDChanging(int value);
    partial void OnPTASegmentIDChanged();
    partial void OnStartTimeInRecChanging(System.TimeSpan value);
    partial void OnStartTimeInRecChanged();
    partial void OnDurationChanging(System.TimeSpan value);
    partial void OnDurationChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnRecordingChanging(int value);
    partial void OnRecordingChanged();
    partial void OnSegmentNumberChanging(short value);
    partial void OnSegmentNumberChanged();
    #endregion
		
		public PTASegment()
		{
			this._PTAPasses = new EntitySet<PTAPass>(new Action<PTAPass>(this.attach_PTAPasses), new Action<PTAPass>(this.detach_PTAPasses));
			this._PTARecording = default(EntityRef<PTARecording>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTASegmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PTASegmentID
		{
			get
			{
				return this._PTASegmentID;
			}
			set
			{
				if ((this._PTASegmentID != value))
				{
					this.OnPTASegmentIDChanging(value);
					this.SendPropertyChanging();
					this._PTASegmentID = value;
					this.SendPropertyChanged("PTASegmentID");
					this.OnPTASegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTimeInRec", DbType="Time NOT NULL")]
		public System.TimeSpan StartTimeInRec
		{
			get
			{
				return this._StartTimeInRec;
			}
			set
			{
				if ((this._StartTimeInRec != value))
				{
					this.OnStartTimeInRecChanging(value);
					this.SendPropertyChanging();
					this._StartTimeInRec = value;
					this.SendPropertyChanged("StartTimeInRec");
					this.OnStartTimeInRecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time NOT NULL")]
		public System.TimeSpan Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recording", DbType="Int NOT NULL")]
		public int Recording
		{
			get
			{
				return this._Recording;
			}
			set
			{
				if ((this._Recording != value))
				{
					if (this._PTARecording.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordingChanging(value);
					this.SendPropertyChanging();
					this._Recording = value;
					this.SendPropertyChanged("Recording");
					this.OnRecordingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentNumber", DbType="SmallInt NOT NULL")]
		public short SegmentNumber
		{
			get
			{
				return this._SegmentNumber;
			}
			set
			{
				if ((this._SegmentNumber != value))
				{
					this.OnSegmentNumberChanging(value);
					this.SendPropertyChanging();
					this._SegmentNumber = value;
					this.SendPropertyChanged("SegmentNumber");
					this.OnSegmentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTASegment_PTAPass", Storage="_PTAPasses", ThisKey="PTASegmentID", OtherKey="Segment")]
		public EntitySet<PTAPass> PTAPasses
		{
			get
			{
				return this._PTAPasses;
			}
			set
			{
				this._PTAPasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTARecording_PTASegment", Storage="_PTARecording", ThisKey="Recording", OtherKey="PTARecordingID", IsForeignKey=true)]
		public PTARecording PTARecording
		{
			get
			{
				return this._PTARecording.Entity;
			}
			set
			{
				PTARecording previousValue = this._PTARecording.Entity;
				if (((previousValue != value) 
							|| (this._PTARecording.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PTARecording.Entity = null;
						previousValue.PTASegments.Remove(this);
					}
					this._PTARecording.Entity = value;
					if ((value != null))
					{
						value.PTASegments.Add(this);
						this._Recording = value.PTARecordingID;
					}
					else
					{
						this._Recording = default(int);
					}
					this.SendPropertyChanged("PTARecording");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PTAPasses(PTAPass entity)
		{
			this.SendPropertyChanging();
			entity.PTASegment = this;
		}
		
		private void detach_PTAPasses(PTAPass entity)
		{
			this.SendPropertyChanging();
			entity.PTASegment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTAPulse")]
	public partial class PTAPulse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTAPulseID;
		
		private short _PulseNumber;
		
		private int _OffsetInPassInSamples;
		
		private int _DurationInSamples;
		
		private System.Nullable<int> _PrevIntervalSamples;
		
		private System.Nullable<double> _MaxVal;
		
		private System.Nullable<double> _PeakArea;
		
		private System.Nullable<double> _AbsoluteThreshold;
		
		private System.Nullable<int> _PeakFrequency;
		
		private System.Nullable<int> _HighFrequency;
		
		private System.Nullable<int> _LowFrequency;
		
		private System.Nullable<int> _HalfHeightWidth;
		
		private System.Nullable<int> _HalfHeightHighFrequency;
		
		private System.Nullable<int> _HalfHeightLowFrequency;
		
		private System.Nullable<double> _AutoCorrelationWidth;
		
		private System.Nullable<int> _FFTSize;
		
		private int _Pass;
		
		private System.Nullable<int> _QuietStart;
		
		private EntityRef<PTAPass> _PTAPass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTAPulseIDChanging(int value);
    partial void OnPTAPulseIDChanged();
    partial void OnPulseNumberChanging(short value);
    partial void OnPulseNumberChanged();
    partial void OnOffsetInPassInSamplesChanging(int value);
    partial void OnOffsetInPassInSamplesChanged();
    partial void OnDurationInSamplesChanging(int value);
    partial void OnDurationInSamplesChanged();
    partial void OnPrevIntervalSamplesChanging(System.Nullable<int> value);
    partial void OnPrevIntervalSamplesChanged();
    partial void OnMaxValChanging(System.Nullable<double> value);
    partial void OnMaxValChanged();
    partial void OnPeakAreaChanging(System.Nullable<double> value);
    partial void OnPeakAreaChanged();
    partial void OnAbsoluteThresholdChanging(System.Nullable<double> value);
    partial void OnAbsoluteThresholdChanged();
    partial void OnPeakFrequencyChanging(System.Nullable<int> value);
    partial void OnPeakFrequencyChanged();
    partial void OnHighFrequencyChanging(System.Nullable<int> value);
    partial void OnHighFrequencyChanged();
    partial void OnLowFrequencyChanging(System.Nullable<int> value);
    partial void OnLowFrequencyChanged();
    partial void OnHalfHeightWidthChanging(System.Nullable<int> value);
    partial void OnHalfHeightWidthChanged();
    partial void OnHalfHeightHighFrequencyChanging(System.Nullable<int> value);
    partial void OnHalfHeightHighFrequencyChanged();
    partial void OnHalfHeightLowFrequencyChanging(System.Nullable<int> value);
    partial void OnHalfHeightLowFrequencyChanged();
    partial void OnAutoCorrelationWidthChanging(System.Nullable<double> value);
    partial void OnAutoCorrelationWidthChanged();
    partial void OnFFTSizeChanging(System.Nullable<int> value);
    partial void OnFFTSizeChanged();
    partial void OnPassChanging(int value);
    partial void OnPassChanged();
    partial void OnQuietStartChanging(System.Nullable<int> value);
    partial void OnQuietStartChanged();
    #endregion
		
		public PTAPulse()
		{
			this._PTAPass = default(EntityRef<PTAPass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTAPulseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PTAPulseID
		{
			get
			{
				return this._PTAPulseID;
			}
			set
			{
				if ((this._PTAPulseID != value))
				{
					this.OnPTAPulseIDChanging(value);
					this.SendPropertyChanging();
					this._PTAPulseID = value;
					this.SendPropertyChanged("PTAPulseID");
					this.OnPTAPulseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PulseNumber", DbType="SmallInt NOT NULL")]
		public short PulseNumber
		{
			get
			{
				return this._PulseNumber;
			}
			set
			{
				if ((this._PulseNumber != value))
				{
					this.OnPulseNumberChanging(value);
					this.SendPropertyChanging();
					this._PulseNumber = value;
					this.SendPropertyChanged("PulseNumber");
					this.OnPulseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffsetInPassInSamples", DbType="Int NOT NULL")]
		public int OffsetInPassInSamples
		{
			get
			{
				return this._OffsetInPassInSamples;
			}
			set
			{
				if ((this._OffsetInPassInSamples != value))
				{
					this.OnOffsetInPassInSamplesChanging(value);
					this.SendPropertyChanging();
					this._OffsetInPassInSamples = value;
					this.SendPropertyChanged("OffsetInPassInSamples");
					this.OnOffsetInPassInSamplesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationInSamples", DbType="Int NOT NULL")]
		public int DurationInSamples
		{
			get
			{
				return this._DurationInSamples;
			}
			set
			{
				if ((this._DurationInSamples != value))
				{
					this.OnDurationInSamplesChanging(value);
					this.SendPropertyChanging();
					this._DurationInSamples = value;
					this.SendPropertyChanged("DurationInSamples");
					this.OnDurationInSamplesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevIntervalSamples", DbType="Int")]
		public System.Nullable<int> PrevIntervalSamples
		{
			get
			{
				return this._PrevIntervalSamples;
			}
			set
			{
				if ((this._PrevIntervalSamples != value))
				{
					this.OnPrevIntervalSamplesChanging(value);
					this.SendPropertyChanging();
					this._PrevIntervalSamples = value;
					this.SendPropertyChanged("PrevIntervalSamples");
					this.OnPrevIntervalSamplesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxVal", DbType="Float")]
		public System.Nullable<double> MaxVal
		{
			get
			{
				return this._MaxVal;
			}
			set
			{
				if ((this._MaxVal != value))
				{
					this.OnMaxValChanging(value);
					this.SendPropertyChanging();
					this._MaxVal = value;
					this.SendPropertyChanged("MaxVal");
					this.OnMaxValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakArea", DbType="Float")]
		public System.Nullable<double> PeakArea
		{
			get
			{
				return this._PeakArea;
			}
			set
			{
				if ((this._PeakArea != value))
				{
					this.OnPeakAreaChanging(value);
					this.SendPropertyChanging();
					this._PeakArea = value;
					this.SendPropertyChanged("PeakArea");
					this.OnPeakAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsoluteThreshold", DbType="Float")]
		public System.Nullable<double> AbsoluteThreshold
		{
			get
			{
				return this._AbsoluteThreshold;
			}
			set
			{
				if ((this._AbsoluteThreshold != value))
				{
					this.OnAbsoluteThresholdChanging(value);
					this.SendPropertyChanging();
					this._AbsoluteThreshold = value;
					this.SendPropertyChanged("AbsoluteThreshold");
					this.OnAbsoluteThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakFrequency", DbType="Int")]
		public System.Nullable<int> PeakFrequency
		{
			get
			{
				return this._PeakFrequency;
			}
			set
			{
				if ((this._PeakFrequency != value))
				{
					this.OnPeakFrequencyChanging(value);
					this.SendPropertyChanging();
					this._PeakFrequency = value;
					this.SendPropertyChanged("PeakFrequency");
					this.OnPeakFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighFrequency", DbType="Int")]
		public System.Nullable<int> HighFrequency
		{
			get
			{
				return this._HighFrequency;
			}
			set
			{
				if ((this._HighFrequency != value))
				{
					this.OnHighFrequencyChanging(value);
					this.SendPropertyChanging();
					this._HighFrequency = value;
					this.SendPropertyChanged("HighFrequency");
					this.OnHighFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowFrequency", DbType="Int")]
		public System.Nullable<int> LowFrequency
		{
			get
			{
				return this._LowFrequency;
			}
			set
			{
				if ((this._LowFrequency != value))
				{
					this.OnLowFrequencyChanging(value);
					this.SendPropertyChanging();
					this._LowFrequency = value;
					this.SendPropertyChanged("LowFrequency");
					this.OnLowFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalfHeightWidth", DbType="Int")]
		public System.Nullable<int> HalfHeightWidth
		{
			get
			{
				return this._HalfHeightWidth;
			}
			set
			{
				if ((this._HalfHeightWidth != value))
				{
					this.OnHalfHeightWidthChanging(value);
					this.SendPropertyChanging();
					this._HalfHeightWidth = value;
					this.SendPropertyChanged("HalfHeightWidth");
					this.OnHalfHeightWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalfHeightHighFrequency", DbType="Int")]
		public System.Nullable<int> HalfHeightHighFrequency
		{
			get
			{
				return this._HalfHeightHighFrequency;
			}
			set
			{
				if ((this._HalfHeightHighFrequency != value))
				{
					this.OnHalfHeightHighFrequencyChanging(value);
					this.SendPropertyChanging();
					this._HalfHeightHighFrequency = value;
					this.SendPropertyChanged("HalfHeightHighFrequency");
					this.OnHalfHeightHighFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalfHeightLowFrequency", DbType="Int")]
		public System.Nullable<int> HalfHeightLowFrequency
		{
			get
			{
				return this._HalfHeightLowFrequency;
			}
			set
			{
				if ((this._HalfHeightLowFrequency != value))
				{
					this.OnHalfHeightLowFrequencyChanging(value);
					this.SendPropertyChanging();
					this._HalfHeightLowFrequency = value;
					this.SendPropertyChanged("HalfHeightLowFrequency");
					this.OnHalfHeightLowFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoCorrelationWidth", DbType="Float")]
		public System.Nullable<double> AutoCorrelationWidth
		{
			get
			{
				return this._AutoCorrelationWidth;
			}
			set
			{
				if ((this._AutoCorrelationWidth != value))
				{
					this.OnAutoCorrelationWidthChanging(value);
					this.SendPropertyChanging();
					this._AutoCorrelationWidth = value;
					this.SendPropertyChanged("AutoCorrelationWidth");
					this.OnAutoCorrelationWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FFTSize", DbType="Int")]
		public System.Nullable<int> FFTSize
		{
			get
			{
				return this._FFTSize;
			}
			set
			{
				if ((this._FFTSize != value))
				{
					this.OnFFTSizeChanging(value);
					this.SendPropertyChanging();
					this._FFTSize = value;
					this.SendPropertyChanged("FFTSize");
					this.OnFFTSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="Int NOT NULL")]
		public int Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					if (this._PTAPass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuietStart", DbType="Int")]
		public System.Nullable<int> QuietStart
		{
			get
			{
				return this._QuietStart;
			}
			set
			{
				if ((this._QuietStart != value))
				{
					this.OnQuietStartChanging(value);
					this.SendPropertyChanging();
					this._QuietStart = value;
					this.SendPropertyChanged("QuietStart");
					this.OnQuietStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTAPass_PTAPulse", Storage="_PTAPass", ThisKey="Pass", OtherKey="PTAPassID", IsForeignKey=true)]
		public PTAPass PTAPass
		{
			get
			{
				return this._PTAPass.Entity;
			}
			set
			{
				PTAPass previousValue = this._PTAPass.Entity;
				if (((previousValue != value) 
							|| (this._PTAPass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PTAPass.Entity = null;
						previousValue.PTAPulses.Remove(this);
					}
					this._PTAPass.Entity = value;
					if ((value != null))
					{
						value.PTAPulses.Add(this);
						this._Pass = value.PTAPassID;
					}
					else
					{
						this._Pass = default(int);
					}
					this.SendPropertyChanged("PTAPass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTARecording")]
	public partial class PTARecording : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTARecordingID;
		
		private string _FileName;
		
		private string _FilePath;
		
		private System.Nullable<int> _SampleRate;
		
		private int _RecordingNumber;
		
		private EntitySet<PTASegment> _PTASegments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTARecordingIDChanging(int value);
    partial void OnPTARecordingIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnSampleRateChanging(System.Nullable<int> value);
    partial void OnSampleRateChanged();
    partial void OnRecordingNumberChanging(int value);
    partial void OnRecordingNumberChanged();
    #endregion
		
		public PTARecording()
		{
			this._PTASegments = new EntitySet<PTASegment>(new Action<PTASegment>(this.attach_PTASegments), new Action<PTASegment>(this.detach_PTASegments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTARecordingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PTARecordingID
		{
			get
			{
				return this._PTARecordingID;
			}
			set
			{
				if ((this._PTARecordingID != value))
				{
					this.OnPTARecordingIDChanging(value);
					this.SendPropertyChanging();
					this._PTARecordingID = value;
					this.SendPropertyChanged("PTARecordingID");
					this.OnPTARecordingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleRate", DbType="Int")]
		public System.Nullable<int> SampleRate
		{
			get
			{
				return this._SampleRate;
			}
			set
			{
				if ((this._SampleRate != value))
				{
					this.OnSampleRateChanging(value);
					this.SendPropertyChanging();
					this._SampleRate = value;
					this.SendPropertyChanged("SampleRate");
					this.OnSampleRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingNumber", DbType="Int NOT NULL")]
		public int RecordingNumber
		{
			get
			{
				return this._RecordingNumber;
			}
			set
			{
				if ((this._RecordingNumber != value))
				{
					this.OnRecordingNumberChanging(value);
					this.SendPropertyChanging();
					this._RecordingNumber = value;
					this.SendPropertyChanged("RecordingNumber");
					this.OnRecordingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTARecording_PTASegment", Storage="_PTASegments", ThisKey="PTARecordingID", OtherKey="Recording")]
		public EntitySet<PTASegment> PTASegments
		{
			get
			{
				return this._PTASegments;
			}
			set
			{
				this._PTASegments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PTASegments(PTASegment entity)
		{
			this.SendPropertyChanging();
			entity.PTARecording = this;
		}
		
		private void detach_PTASegments(PTASegment entity)
		{
			this.SendPropertyChanging();
			entity.PTARecording = null;
		}
	}
}
#pragma warning restore 1591
